//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck
//file:noinspection DependencyNotationArgument

dependencies {
	// Fabric common module
	implementation(project(":fabric:minecraft-common"))

	// Fabric generator module
	// TODO: Fix circular dependency
	implementation(project(":fabric:modules:generator"))

	// Fabric Loader
	modCompileOnly "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

	// Advanced Runtime Resource Pack
	modImplementation("maven.modrinth:arrp:${project.advanced_runtime_resource_pack_version}")
}

sourceSets {
	test {
		compileClasspath += test.compileClasspath
		runtimeClasspath += test.runtimeClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
	accessWidenerPath = file("src/main/resources/${mod_id}-core.accesswidener")

	runs {
		testServer {
			server()
			ideConfigGenerated project.rootProject == project
			name = "Test Server"
			source sourceSets.test
		}
		gameTest {
			inherit testServer
			name "Game Test"
			// Enable the gametest runner
			vmArg "-Dfabric-api.gametest"
			runDir "build/gametest"
		}
		testClient {
			client()
			name = "Test Client"
			vmArg "-Dfabric-api.gametest.structures.output-dir=${file("src/test/resources/data/${mod_id}/gametest/structures")}"

			ideConfigGenerated = false
			source sourceSets.test
		}
	}
}

test {
	useJUnitPlatform()
	maxParallelForks = 32
	testLogging.events("failed")
	testLogging.info.events = ["failed", "skipped"]
}
